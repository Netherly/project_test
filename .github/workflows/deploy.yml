name: deploy-crm
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ secrets.NODE_VERSION || '20' }}

      - name: Detect dirs
        run: |
          if [ -d Frontend ]; then echo "FE_DIR=Frontend" >> $GITHUB_ENV; else echo "FE_DIR=frontend" >> $GITHUB_ENV; fi
          if [ -d Backend ]; then echo "BE_DIR=Backend" >> $GITHUB_ENV; else echo "BE_DIR=backend" >> $GITHUB_ENV; fi

      # 1) Проверяем, что секрет задан
      - name: Ensure FRONTEND_ENV is present
        run: |
          if [ -z "${{ secrets.FRONTEND_ENV }}" ]; then
            echo "::error ::FRONTEND_ENV secret is empty. Put for Vite: 'VITE_API_URL=https://gsse.work/api'"
            exit 1
          fi

      # 2) Пишем .env и показываем первые строки
      - name: Write frontend env
        run: |
          cd "${{ env.FE_DIR }}"
          printf "%s\n" "${{ secrets.FRONTEND_ENV }}" > .env
          echo "----- .env (first lines) -----"
          head -n 5 .env || true
          echo "--------------------------------"

      - name: Install & Build frontend
        working-directory: ./${{ env.FE_DIR }}
        run: |
          npm ci || npm install
          npm run build || npm run build:prod || echo "build script missing"

      - name: Detect frontend output dir
        run: |
          if [ -d "${{ env.FE_DIR }}/dist" ]; then echo "FE_OUT=dist" >> $GITHUB_ENV; else echo "FE_OUT=build" >> $GITHUB_ENV; fi
          echo "FE_DIR=${{ env.FE_DIR }} FE_OUT=${{ env.FE_OUT }}"

      # 3) Проверяем, что в бандле нет localhost и есть gsse.work/api
      - name: Verify API url baked into bundle
        run: |
          echo "Searching for 'localhost:3000' in bundle..."
          if grep -R "localhost:3000" "${{ env.FE_DIR }}/${{ env.FE_OUT }}" -n; then
            echo "::error ::Bundle contains 'localhost:3000'. Check FRONTEND_ENV and api.js"
            exit 1
          else
            echo "OK: no 'localhost:3000' found."
          fi
          echo "Searching for 'gsse.work/api' in bundle..."
          if ! grep -R "gsse.work/api" "${{ env.FE_DIR }}/${{ env.FE_OUT }}" -n >/dev/null 2>&1; then
            echo "::warning ::Didn't find 'gsse.work/api' in minified bundle. If you use relative '/api', that's fine."
          else
            echo "OK: found 'gsse.work/api' in bundle."
          fi

      - name: SSH smoke test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: 'echo ok'

      - name: Ensure dirs exist on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            mkdir -p /var/www/crm-frontend
            mkdir -p /var/www/crm-backend

      - name: Upload frontend build (flatten)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "${{ env.FE_DIR }}/${{ env.FE_OUT }}/**"
          target: "/var/www/crm-frontend/"
          overwrite: true
          rm: true
          strip_components: 2

      - name: Upload backend source (flatten, skip node_modules)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "${{ env.BE_DIR }}/**"
          target: "/var/www/crm-backend/"
          overwrite: true
          strip_components: 1
          rm: true
          exclude: |
            **/node_modules/**
            **/.git/**
            **/.github/**
            **/.env*

      - name: Write backend env
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            cat > /var/www/crm-backend/.env << 'EOF'
            ${{ secrets.BACKEND_ENV }}
            EOF

      - name: Install Node and pm2 on server if missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

      - name: Install backend deps and reload pm2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            cd /var/www/crm-backend
            HUSKY=0 npm ci --omit=dev || HUSKY=0 npm install --omit=dev
            npx prisma generate || true
            npx prisma db push || true
            npm run seed || true
            if npm run | grep -qE " start"; then
              pm2 reload crm-backend || pm2 start npm --name crm-backend -- run start
            else
              pm2 delete crm-backend || true
              pm2 start node --name crm-backend -- src/server.js
            fi
            pm2 save
