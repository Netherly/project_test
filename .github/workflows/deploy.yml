name: deploy-crm

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ secrets.NODE_VERSION || '20' }}

      - name: Detect frontend/backend dirs
        run: |
          if [ -d Frontend ]; then echo "FE_DIR=Frontend" >> $GITHUB_ENV; else echo "FE_DIR=frontend" >> $GITHUB_ENV; fi
          if [ -d Backend ]; then echo "BE_DIR=Backend"  >> $GITHUB_ENV; else echo "BE_DIR=backend"  >> $GITHUB_ENV; fi

      - name: Write frontend .env
        run: |
          cd "${{ env.FE_DIR }}"
          printf "%s\n" "${{ secrets.FRONTEND_ENV }}" > .env || true

      - name: Install & Build frontend
        working-directory: ./${{ env.FE_DIR }}
        run: |
          npm ci || npm install
          npm run build || npm run build:prod || echo "no build script"

      - name: Detect FE_OUT
        run: |
          if [ -d "${{ env.FE_DIR }}/dist" ]; then echo "FE_OUT=dist" >> $GITHUB_ENV; else echo "FE_OUT=build" >> $GITHUB_ENV; fi
          echo "FE_DIR=${{ env.FE_DIR }} FE_OUT=${{ env.FE_OUT }}"
          test -d "${{ env.FE_DIR }}/${{ env.FE_OUT }}" || (echo "Build dir not found" && exit 1)
          find "${{ env.FE_DIR }}/${{ env.FE_OUT }}" -maxdepth 1 -type f | head -n 10

      - name: Fail if bundle contains localhost:3000
        run: |
          set -e
          echo "Searching for 'localhost:3000' in bundle..."
          if grep -R --line-number --no-messages "localhost:3000" "${{ env.FE_DIR }}/${{ env.FE_OUT }}" ; then
            echo "Bundle contains 'localhost:3000'. Check FRONTEND_ENV (VITE_API_URL) и api клиент." >&2
            exit 1
          fi
          echo "OK: bundle does not contain localhost:3000"

      - name: Pack frontend build
        run: |
          tar -C "${{ env.FE_DIR }}" -czf frontend.tgz "${{ env.FE_OUT }}"

      - name: Upload frontend archive
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "frontend.tgz"
          target: "/var/www/"
          overwrite: true

      - name: Unpack frontend on server (atomic)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            cd /var/www
            mkdir -p crm-frontend .releases
            rm -rf .releases/frontend_new
            mkdir -p .releases/frontend_new
            tar -xzf frontend.tgz -C .releases/frontend_new
            if [ -d ".releases/frontend_new/${{ env.FE_OUT }}" ]; then
              rsync -a --delete --exclude '.well-known' ".releases/frontend_new/${{ env.FE_OUT }}/" "crm-frontend/"
            else
              rsync -a --delete --exclude '.well-known' ".releases/frontend_new/" "crm-frontend/"
            fi
            rm -f frontend.tgz

      - name: Pack backend source
        run: |
          set -e
          EXCLUDES=(
            --exclude="${{ env.BE_DIR }}/node_modules"
            --exclude="${{ env.BE_DIR }}/.git"
            --exclude="${{ env.BE_DIR }}/.github"
            --exclude="${{ env.BE_DIR }}/.env*"
          )
          tar -czf backend.tgz "${EXCLUDES[@]}" "${{ env.BE_DIR }}"

      - name: Upload backend archive
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "backend.tgz"
          target: "/var/www/"
          overwrite: true

      - name: Unpack backend on server (atomic)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            cd /var/www
            mkdir -p crm-backend .releases
            rm -rf .releases/backend_new
            mkdir -p .releases/backend_new
            tar -xzf backend.tgz -C .releases/backend_new
            if [ -d ".releases/backend_new/backend" ]; then
              rsync -a --delete ".releases/backend_new/backend/" "crm-backend/"
            elif [ -d ".releases/backend_new/Backend" ]; then
              rsync -a --delete ".releases/backend_new/Backend/" "crm-backend/"
            else
              rsync -a --delete ".releases/backend_new/" "crm-backend/"
            fi
            rm -f backend.tgz

      - name: Write backend .env on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            cat > /var/www/crm-backend/.env << 'EOF'
            ${{ secrets.BACKEND_ENV }}
            EOF
            chmod 640 /var/www/crm-backend/.env

      - name: Install Node and pm2 on server if missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

      - name: Install backend deps, migrate, start pm2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            cd /var/www/crm-backend
            export HUSKY=0
            npm ci --omit=dev || npm install --omit=dev
            npx prisma generate || true
            npx prisma migrate deploy || npx prisma db push || true
            npm run seed || true
            if npm run | grep -qE " start"; then
              pm2 reload crm-backend || pm2 start npm --name crm-backend -- run start
            else
              pm2 delete crm-backend || true
              pm2 start node --name crm-backend -- src/server.js
            fi
            pm2 save

      - name: Backend health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            curl -fsSI -H "Host: ${{ secrets.PRIMARY_DOMAIN || 'gsse.work' }}" http://127.0.0.1/api/health || true
