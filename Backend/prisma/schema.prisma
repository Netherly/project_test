generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Справочники / теги
   ========================= */

model TagCategory {
  id   String @id @default(uuid())
  code String @unique @db.VarChar(50)
  name String @db.VarChar(100)
  tags Tag[]
}

model Tag {
  id         String        @id @default(uuid())
  name       String        @db.VarChar(100)
  color      String        @db.VarChar(16)
  categoryId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  category   TagCategory   @relation(fields: [categoryId], references: [id])

  // m2m
  clients    ClientTag[]
  employees  EmployeeTag[]
  orders     OrderTag[]

  @@unique([name, categoryId])
}

model Country {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  iso2      String?    @unique @db.VarChar(2)
  iso3      String?    @unique @db.VarChar(3)
  isActive  Boolean    @default(true)
  order     Int        @default(0)

  // обратки
  clients   Client[]
  employees Employee[]
}

model CurrencyDict {
  id               String             @id @default(uuid())
  code             String             @unique @db.VarChar(10)
  name             String?            @db.VarChar(100)
  isActive         Boolean            @default(true)
  order            Int                @default(0)

  // обратки
  assets           Asset[]
  clients          Client[]
  employeeSettings EmployeeSettings[]
  orders           Order[]
  employees        Employee[]         // back relation for Employee.currency
}

model ClientSourceDict {
  id       String   @id @default(uuid())
  name     String   @unique @db.VarChar(100)
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // обратка
  clients  Client[]
}

model ClientCategoryDict {
  id       String   @id @default(uuid())
  name     String   @unique @db.VarChar(100)
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // обратка
  clients  Client[]
}

model ExecutorRoleDict {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  isActive  Boolean    @default(true)
  order     Int        @default(0)

  // обратка
  employees Employee[]
}

model AssetTypeDict {
  id       String  @id @default(uuid())
  name     String  @unique @db.VarChar(100)
  isActive Boolean @default(true)
  order    Int     @default(0)

  // обратка
  assets   Asset[]
}

model PaymentSystemDict {
  id       String  @id @default(uuid())
  name     String  @unique @db.VarChar(100)
  isActive Boolean @default(true)
  order    Int     @default(0)

  // обратка
  assets   Asset[]
}

model CardDesign {
  id       String  @id @default(uuid())
  name     String  @unique @db.VarChar(100)
  imageUrl String? @db.VarChar(1000)
  isActive Boolean @default(true)
  order    Int     @default(0)

  // обратка
  assets   Asset[]
}

model OrderIntervalDict {
  id         String              @id @default(uuid())
  value      String              @unique @db.VarChar(100)
  isActive   Boolean             @default(true)
  order      Int                 @default(0)

  // обратка
  categories OrderCategoryDict[]
}

model OrderCategoryDict {
  id         String            @id @default(uuid())
  intervalId String
  value      String            @db.VarChar(100)
  isActive   Boolean           @default(true)
  order      Int               @default(0)

  interval   OrderIntervalDict @relation(fields: [intervalId], references: [id])

  @@unique([intervalId, value])
  @@index([intervalId])
}

model FinanceArticleDict {
  id           String                  @id @default(uuid())
  name         String                  @unique @db.VarChar(150)
  isActive     Boolean                 @default(true)
  order        Int                     @default(0)

  // обратки
  subarticles  FinanceSubarticleDict[]
  transactions Transaction[]
}

model FinanceSubcategoryDict {
  id          String                  @id @default(uuid())
  name        String                  @unique @db.VarChar(150)
  isActive    Boolean                 @default(true)
  order       Int                     @default(0)

  // обратка
  subarticles FinanceSubarticleDict[]
}

model FinanceSubarticleDict {
  id            String                  @id @default(uuid())
  articleId     String?
  subcategoryId String?
  name          String                  @db.VarChar(150)
  isActive      Boolean                 @default(true)
  order         Int                     @default(0)

  article       FinanceArticleDict?     @relation(fields: [articleId], references: [id])
  subcategory   FinanceSubcategoryDict? @relation(fields: [subcategoryId], references: [id])

  // обратка
  transactions  Transaction[]

  @@index([articleId])
  @@index([subcategoryId])
}

/* =========================
   Статусы / enum
   ========================= */

enum EmployeeStatus {
  active
  inactive
  pending
}

enum ClientStatus {
  active
  paused
  archived
}

enum OperationType {
  DEPOSIT
  WITHDRAW
}

enum EmployeeTheme {
  light
  dark
}

/* =========================
   Сущности
   ========================= */

model Employee {
  id                   String   @id @default(cuid())
  status               EmployeeStatus?
  full_name            String?
  phone                String?
  email                String?
  login                String?  @unique
  password             String?
  folder               String?
  userid String? @unique @db.VarChar(8)


  // связь с компанией как Client (НЕ модель Company)
  companyId            String?
  company              Client?           @relation("EmployeeCompany", fields: [companyId], references: [id])

  publicId             String?
  roleId               String?
  countryId            String?

  // валюта сотрудника
  currencyId           String?
  currency             CurrencyDict?     @relation(fields: [currencyId], references: [id])

  // Telegram/contacts
  telegramUserId       BigInt?  @unique
  telegramChatId       BigInt?
  telegramUsername     String?
  telegramLinkedAt     DateTime?
  telegramVerified     Boolean? @default(false)

  balance              Decimal? @default(0)

  birthDate            DateTime?
  passport             String?
  address              String?
  chatLink             String?
  telegramDateTime     DateTime?
  telegramId           BigInt?
  telegramName         String?
  telegramNickname     String?
  telegramBindingLink  String?
  photoLink            String?
  rates                Json?
  mainCurrency         String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // внешние связи
  country              Country?          @relation(fields: [countryId], references: [id])
  role                 ExecutorRoleDict? @relation(fields: [roleId], references: [id])

  // ОДИН-К-ОДНОМУ настройки — обратка для EmployeeSettings.employee
  settings             EmployeeSettings?

  // обратки
  telegramTickets      TelegramLinkTicket[]
  orders               Order[]           // обратка: Order.employee
  transactions         Transaction[]     // обратка: Transaction.employee
  tags                 EmployeeTag[]
  requisites           EmployeeRequisite[]
  assets               Asset[]

  // менеджер ⇄ клиенты (именованная связь)
  clients              Client[]          @relation("ManagerClients")

  tasks                Task[]
}

model EmployeeSettings {
  id             String        @id @default(uuid())
  employeeId     String        @unique
  crmLanguage    String        @default("ua") @db.VarChar(5)
  crmTheme       EmployeeTheme @default(light)
  crmBackground  String?       @db.VarChar(1000)
  currencyId     String?
  timezone       String?       @db.VarChar(64)
  notifySound    Boolean       @default(true)
  notifyCounter  Boolean       @default(true)
  notifyTelegram Boolean       @default(true)
  workSchedule   Json?
  botReminders   Json?
  avatarUrl      String?       @db.VarChar(1000)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  currency       CurrencyDict? @relation(fields: [currencyId], references: [id])

  // связь к сотруднику
  employee       Employee      @relation(fields: [employeeId], references: [id])

  @@index([currencyId])
}

model EmployeeRequisite {
  id         String   @id @default(uuid())
  employeeId String
  label      String   @db.VarChar(100)
  value      String   @db.VarChar(1000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model TelegramLinkTicket {
  id         String    @id @default(uuid())
  code       String    @unique @db.VarChar(12)
  expiresAt  DateTime
  consumedAt DateTime?
  employeeId String

  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@index([expiresAt])
}

model Company {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(255)

  // обратки и связи
  assets       Asset[]
  credentials  Credential[]
  tasks        Task[]
  transactions Transaction[] @relation("CompanyTransactions")
}

model ClientGroup {
  id      String   @id @default(uuid())
  name    String   @unique @db.VarChar(100)
  order   Int      @default(0)

  // обратка
  clients Client[]
}

model Client {
  id                String       @id @default(uuid())
  groupId           String?
  name              String?      @db.VarChar(255)
  messenger_name    String?      @db.VarChar(100)
  intro_description String?
  note              String?
  categoryId        String?
  sourceId          String?
  full_name         String?      @db.VarChar(255)
  countryId         String?
  currencyId        String?
  phone             String?      @db.VarChar(50)
  email             String?      @db.VarChar(100)
  city              String?      @db.VarChar(100)
  payment_details   String?
  hourly_rate       Float?
  percent           Float?
  share_info        String?
  status            ClientStatus @default(active)
  referrer_id       String?
  referrer_first_id String?

  // менеджер (именованная связь с Employee)
  managerId         String?
  // компания как self-relation
  companyId         String?

  chat_link         String?
  photo_link        String?
  folder_link       String?

  // справочники
  group             ClientGroup?         @relation(fields: [groupId], references: [id])
  category          ClientCategoryDict?  @relation(fields: [categoryId], references: [id])
  source            ClientSourceDict?    @relation(fields: [sourceId], references: [id])
  country           Country?             @relation(fields: [countryId], references: [id])
  currency          CurrencyDict?        @relation(fields: [currencyId], references: [id])

  // self-relation: компания ↔ клиенты
  company           Client?              @relation("CompanyClients", fields: [companyId], references: [id])
  clients           Client[]             @relation("CompanyClients")

  // сотрудники, для которых этот клиент является company (обратка к Employee.company с именем "EmployeeCompany")
  employees         Employee[]           @relation("EmployeeCompany")

  // менеджер ↔ клиенты
  manager           Employee?            @relation("ManagerClients", fields: [managerId], references: [id])

  // обратки и связи
  credentials       Credential[]
  orders            Order[]
  tasks             Task[]
  transactions      Transaction[]        @relation("ClientTransactions")
  tags              ClientTag[]
}

model Credential {
  id          String   @id @default(uuid())
  login       String
  password    String
  description String?
  clientId    String?
  companyId   String?

  client      Client?  @relation(fields: [clientId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])

  @@index([clientId])
  @@index([companyId])
}

model Order {
  id           String        @id @default(uuid())
  clientId     String
  title        String
  amount       Decimal?      @db.Decimal(12, 2)
  currencyId   String?
  createdAt    DateTime      @default(now())

  employeeId   String?
  employee     Employee?     @relation(fields: [employeeId], references: [id])

  tags         OrderTag[]
  transactions Transaction[]

  client       Client        @relation(fields: [clientId], references: [id])
  currency     CurrencyDict? @relation(fields: [currencyId], references: [id])

  @@index([clientId, createdAt])
  @@index([currencyId])
  @@map("orders")
}

model Task {
  id                 String   @id @default(uuid())
  title              String
  description        String
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employeeId         String
  clientId           String?
  companyId          String?

  country            String?  @db.VarChar(100)
  category           String?  @db.VarChar(100)
  source             String?  @db.VarChar(100)
  referer            String?  @db.VarChar(255)
  refererFirst       String?  @db.VarChar(255)
  managerName        String?  @db.VarChar(255)
  firstOrder         Boolean? @default(false)
  partnerName        String?  @db.VarChar(255)
  partnerDisabled    Boolean? @default(false)
  partnerPayment     Decimal? @db.Decimal(10, 2)
  partnerPlan        Int?
  partnerPlanPercent Int?
  partnerPlanSum     Int?
  partnerDebt        Decimal? @db.Decimal(10, 2)

  client             Client?  @relation(fields: [clientId], references: [id])
  company            Company? @relation(fields: [companyId], references: [id])
  employee           Employee @relation(fields: [employeeId], references: [id])
}

model ExchangeRates {
  id        String   @id @default(uuid())
  date      DateTime @unique
  uah       Decimal  @db.Decimal(18, 8)
  usd       Decimal  @db.Decimal(18, 8)
  rub       Decimal  @db.Decimal(18, 8)
  usdt      Decimal  @db.Decimal(18, 8)
  uah_rub   Decimal  @db.Decimal(18, 8)
  uah_usd   Decimal  @db.Decimal(18, 8)
  uah_usdt  Decimal  @db.Decimal(18, 8)
  usd_uah   Decimal  @db.Decimal(18, 8)
  usd_rub   Decimal  @db.Decimal(18, 8)
  usd_usdt  Decimal  @db.Decimal(18, 8)
  usdt_uah  Decimal  @db.Decimal(18, 8)
  usdt_usd  Decimal  @db.Decimal(18, 8)
  usdt_rub  Decimal  @db.Decimal(18, 8)
  rub_uah   Decimal  @db.Decimal(18, 8)
  rub_usd   Decimal  @db.Decimal(18, 8)
  rub_usdt  Decimal  @db.Decimal(18, 8)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model Transaction {
  id                            String                 @id @default(uuid())
  date                          DateTime
  category                      String?                @db.VarChar(100)
  subcategory                   String?                @db.VarChar(100)
  categoryId                    String?
  subcategoryId                 String?
  description                   String?
  accountId                     String
  accountCurrency               String                 @db.VarChar(10)
  operation                     OperationType
  amount                        Decimal                @db.Decimal(14, 2)
  commission                    Decimal?               @db.Decimal(14, 2)
  counterparty                  String?
  counterpartyRequisites        String?
  orderId                       String?
  orderNumber                   String?
  orderCurrency                 String?                @db.VarChar(10)
  sumUAH                        Decimal?               @db.Decimal(14, 2)
  sumUSD                        Decimal?               @db.Decimal(14, 2)
  sumRUB                        Decimal?               @db.Decimal(14, 2)
  sumByRatesOrderAmountCurrency Decimal?               @db.Decimal(14, 2)
  sumByRatesUAH                 Decimal?               @db.Decimal(14, 2)
  sumByRatesUSD                 Decimal?               @db.Decimal(14, 2)
  sumByRatesRUB                 Decimal?               @db.Decimal(14, 2)
  sentToCounterparty            Boolean                @default(false)
  sendLion                      Boolean                @default(false)
  balanceBefore                 Decimal?               @db.Decimal(14, 2)
  balanceAfter                  Decimal?               @db.Decimal(14, 2)
  clientId                      String?
  companyId                     String?
  employeeId                    String?
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt

  account                       Asset                  @relation(fields: [accountId], references: [id])
  categoryDict                  FinanceArticleDict?    @relation(fields: [categoryId], references: [id])
  subcategoryDict               FinanceSubarticleDict? @relation(fields: [subcategoryId], references: [id])

  client                        Client?                @relation("ClientTransactions", fields: [clientId], references: [id])
  company                       Company?               @relation("CompanyTransactions", fields: [companyId], references: [id])
  order                         Order?                 @relation(fields: [orderId], references: [id])
  employee                      Employee?              @relation(fields: [employeeId], references: [id])

  @@index([date])
  @@index([accountId])
  @@index([clientId])
  @@index([companyId])
  @@index([operation])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([employeeId])
}

/* =========================
   M2M стыковочные таблицы
   ========================= */

model EmployeeTag {
  employeeId String
  tagId      String

  employee   Employee @relation(fields: [employeeId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([employeeId, tagId])
  @@index([tagId])
}

model ClientTag {
  clientId String
  tagId    String

  client   Client @relation(fields: [clientId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([clientId, tagId])
  @@index([tagId])
}

model OrderTag {
  orderId String
  tagId   String

  order   Order  @relation(fields: [orderId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@id([orderId, tagId])
  @@index([tagId])
}

/* =========================
   Активы / счета
   ========================= */

model Asset {
  id                   String             @id @default(uuid())
  accountName          String             @db.VarChar(255)
  externalId           String?            @db.VarChar(255)
  currencyId           String
  typeId               String?
  paymentSystemId      String?
  cardDesignId         String?
  employeeId           String?
  companyId            String?
  balance              Decimal            @default(0) @db.Decimal(14, 2)
  turnoverStartBalance Decimal            @default(0) @db.Decimal(14, 2)
  turnoverIncoming     Decimal            @default(0) @db.Decimal(14, 2)
  turnoverOutgoing     Decimal            @default(0) @db.Decimal(14, 2)
  turnoverEndBalance   Decimal            @default(0) @db.Decimal(14, 2)
  balanceUAH           Decimal            @default(0) @db.Decimal(14, 2)
  lastEntryDate        DateTime?
  design               String?            @db.VarChar(100)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  cardDesign           CardDesign?        @relation(fields: [cardDesignId], references: [id])
  company              Company?           @relation(fields: [companyId], references: [id])
  currency             CurrencyDict       @relation(fields: [currencyId], references: [id])
  employee             Employee?          @relation(fields: [employeeId], references: [id])
  paymentSystem        PaymentSystemDict? @relation(fields: [paymentSystemId], references: [id])
  type                 AssetTypeDict?     @relation(fields: [typeId], references: [id])

  requisites           AssetRequisite[]
  transactions         Transaction[]

  @@index([currencyId])
  @@index([employeeId])
  @@index([companyId])
}

model AssetRequisite {
  id        String   @id @default(uuid())
  assetId   String
  label     String   @db.VarChar(100)
  value     String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset     Asset    @relation(fields: [assetId], references: [id])

  @@index([assetId])
}
