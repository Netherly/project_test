import React, { useState, useRef, useCallback } from "react";
import { DndProvider, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import Sidebar from "../Sidebar";
import StageColumn from "./StageColumn";
import OrderModal from "../modals/OrderModal/OrderModal";
import PageHeaderIcon from '../HeaderIcon/PageHeaderIcon.jsx';
import ColumnMinimap from "./Minimap/ColumnMinimap";
import ColumnVisibilityToggle from "./ColumnVisibilityToggle/ColumnVisibilityToggle";
import useHorizontalDragScroll from "./hooks/useHorizontalDragScroll";
import "../../styles/OrdersPage.css";
import "./Minimap/ColumnMinimap.css";
import "./ColumnVisibilityToggle/ColumnVisibilityToggle.css";

const QuickDropZone = ({ stage, moveOrder, onDragEnd }) => {
    const [{ isOver }, drop] = useDrop({
        accept: "order",
        drop: (item) => {
            moveOrder(item.id, stage, 0);
            if (onDragEnd) onDragEnd();
        },
        collect: (monitor) => ({
            isOver: monitor.isOver(),
        }),
    });

    const getStageIcon = (stage) => {
        const icons = {
            "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω": "‚úÖ",
            "–ó–∞–∫—Ä—ã—Ç": "üîí",
            "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω": "‚ùå",
            "–£–¥–∞–ª–µ–Ω–Ω—ã–µ": "üóëÔ∏è"
        };
        return icons[stage] || "üìã";
    };

    const getStageColor = (stage) => {
        const colors = {
            "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω": "#36a850",
            "–ó–∞–∫—Ä—ã—Ç": "#46bcc6",
            "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω": "#e94335",
            "–£–¥–∞–ª–µ–Ω–Ω—ã–µ": "#7f8c8d"
        };
        return colors[stage] || "#3498db";
    };

    return (
        <div
            ref={drop}
            className={`quick-drop-zone ${isOver ? 'quick-drop-hover' : ''}`}
            style={{
                borderColor: getStageColor(stage),
                backgroundColor: isOver ? `${getStageColor(stage)}20` : 'transparent'
            }}
        >
            <div className="quick-drop-icon" style={{ color: getStageColor(stage) }}>
                {getStageIcon(stage)}
            </div>
            <div className="quick-drop-text" style={{ color: getStageColor(stage) }}>
                {stage}
            </div>
        </div>
    );
};

const allStages = [
    "–õ–∏–¥", "–ò–∑—É—á–∞–µ–º –¢–ó", "–û–±—Å—É–∂–¥–∞–µ–º —Å –∫–ª–∏–µ–Ω—Ç–æ–º", "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç",
    "–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", "–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É", "–í–µ–¥–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    "–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞", "–¢–µ—Å—Ç–∏—Ä—É–µ–º", "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç",
    "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É", "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", "–ó–∞–∫—Ä—ã—Ç",
    "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω", "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"
];

const finalStages = ["–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", "–ó–∞–∫—Ä—ã—Ç", "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω", "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"];

const OrdersPage = () => {
    const [orders, setOrders] = useState([
        { id: 1, numberOrder: "2234", name: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –°–†–ú", stage: "–õ–∏–¥", date: "21.03.2025", price: 50000, client: "–õ–µ–≤" },
        { id: 2, name: "–†–µ–¥–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞", stage: "–ò–∑—É—á–∞–µ–º –¢–ó", date: "23.03.2025", price: 24300 },
        { id: 3, name: "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", stage: "–û–±—Å—É–∂–¥–∞–µ–º —Å –∫–ª–∏–µ–Ω—Ç–æ–º", date: "27.03.2025", price: 35000 },
        { id: 4, numberOrder: "23334", name: "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", stage: "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç", price: 28000 },
        { id: 5, name: "–ü—Ä–µ–¥—Ä–µ–π—Å", stage: "–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", price: 15000 },
        { id: 6, name: "–ü–æ–∫—É—Ä–∏—Ç—å", stage: "–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É", price: 8000 },
        { id: 7, name: "–í—ã–ø–∏—Ç—å –ø–∏–≤–∞", stage: "–í–µ–¥–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", price: 12000 },
        { id: 8, name: "–¢–∏–º –±–∏–ª–¥–∏–Ω–≥ –≤ –∫—Å2", stage: "–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞", price: 25000 },
        { id: 9, name: "–ü–æ–∫—É—Ä–∏—Ç—å", stage: "–¢–µ—Å—Ç–∏—Ä—É–µ–º", price: 9000 },
        { id: 10, name: "–¢–∏–º –±–∏–ª–¥–∏–Ω–≥ –≤ –∫—Å2", stage: "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç", price: 18000 },
        { id: 11, name: "–ü–æ–∫—É—Ä–∏—Ç—å", stage: "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ", price: 6000 }
    ]);

    // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, –∞ –Ω–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
    const [visibleOrderStages, setVisibleOrderStages] = useState(() => {
        return allStages.filter(stage => !finalStages.includes(stage));
    });

    const [selectedOrder, setSelectedOrder] = useState(null);
    const [viewMode, setViewMode] = useState('kanban');
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [isDragging, setIsDragging] = useState(false);
    const stagesContainerRef = useRef(null);
    const isDraggingRef = useRef(false);

    const moveOrder = useCallback((orderId, newStage, newIndex) => {
        setOrders((prevOrders) => {
            const order = prevOrders.find((o) => o.id === orderId);
            if (!order) return prevOrders;

            const filteredOrders = prevOrders.filter((o) => o.id !== orderId);
            const newOrders = [...filteredOrders];

            newOrders.splice(newIndex, 0, { ...order, stage: newStage });

            return newOrders;
        });
    }, []);

    const updateOrder = (updatedOrder) => {
        setOrders((prev) =>
            prev.map((order) =>
                order.id === updatedOrder.id ? { ...order, ...updatedOrder } : order
            )
        );
    };

    const handleDragStart = () => {
        setIsDragging(true);
    };

    const handleDragEnd = () => {
        setIsDragging(false);
    };

    const handleToggleStage = (stage) => {
        setVisibleOrderStages(prev => {
            if (prev.includes(stage)) {
                return prev.filter(s => s !== stage);
            } else {
                return [...prev, stage];
            }
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–¥–∏–∏
    const getFilteredOrdersForStage = (stage) => {
        const stageOrders = orders.filter((order) => order.stage === stage);

        // –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –≤–∏–¥–∏–º—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (!visibleOrderStages.includes(stage)) {
            return [];
        }

        return stageOrders;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –º–∏–Ω–∏–∫–∞—Ä—Ç—ã
    const handleScrollToPosition = useCallback((scrollLeft) => {
        if (stagesContainerRef.current) {
            stagesContainerRef.current.scrollLeft = scrollLeft;
        }
    }, []);

    useHorizontalDragScroll(stagesContainerRef, isDraggingRef);

    return (
        <div className="orders-page">
            <Sidebar />
            <div className="order-page-main-container">
                <header className="order-header-container">
                    <h1 className="order-title">
                        <PageHeaderIcon pageName="–ó–∞–∫–∞–∑—ã" />
                        –ó–∞–∫–∞–∑—ã
                    </h1>
                    <div className="view-mode-buttons">
                        <button
                            className={`view-mode-button ${viewMode === 'kanban' ? 'active' : ''}`}
                            onClick={() => setViewMode('kanban')}
                            title="–ö–∞–Ω–±–∞–Ω –≤–∏–¥"
                        >
                            &#x25A3;
                        </button>
                        <button
                            className={`view-mode-button ${viewMode === 'table' ? 'active' : ''}`}
                            onClick={() => setViewMode('table')}
                            title="–¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥"
                        >
                            &#x2261;
                        </button>
                    </div>

                    <ColumnVisibilityToggle
                        stages={allStages}
                        visibleStages={visibleOrderStages}
                        onToggleStage={handleToggleStage}
                    />

                    <button className="create-order-btn" onClick={() => setShowCreateModal(true)}>
                        ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                    </button>
                </header>

                <DndProvider backend={HTML5Backend}>
                    <div className="stages-container" ref={stagesContainerRef}>
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å—Ç–æ–ª–±—Ü—ã, –Ω–æ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ */}
                        {allStages.map((stage) => (
                            <StageColumn
                                key={stage}
                                stage={stage}
                                orders={getFilteredOrdersForStage(stage)}
                                moveOrder={moveOrder}
                                onOrderClick={setSelectedOrder}
                                isDraggingRef={isDraggingRef}
                                onDragStart={handleDragStart}
                                onDragEnd={handleDragEnd}
                            />
                        ))}
                    </div>

                    {/* –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã */}
                    <ColumnMinimap
                        containerRef={stagesContainerRef}
                        stages={allStages}
                        onScrollToPosition={handleScrollToPosition}
                        isDragging={isDragging}
                    />

                    {isDragging && (
                        <div className="final-stages-panel">
                            <div className="final-stages-container">
                                {finalStages.map((stage) => (
                                    <QuickDropZone
                                        key={`quick-${stage}`}
                                        stage={stage}
                                        moveOrder={moveOrder}
                                        onDragEnd={handleDragEnd}
                                    />
                                ))}
                            </div>
                        </div>
                    )}
                </DndProvider>
            </div>

            {selectedOrder && (
                <OrderModal
                    order={selectedOrder}
                    onClose={() => setSelectedOrder(null)}
                    onUpdateOrder={updateOrder}
                />
            )}
        </div>
    );
};

export default OrdersPage;