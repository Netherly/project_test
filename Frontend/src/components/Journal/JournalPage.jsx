import React, { useState, useEffect } from "react";
import Sidebar from "../Sidebar";
import "../../styles/JournalPage.css";
import LogEntryDetails from "./LogEntryDetail";
import AddLogEntryForm from "./AddLogEntryForm";


import {
    getLogEntries,
    addLogEntry,
    updateLogEntry,
    deleteLogEntry,
} from "./journalApi"; 

const JournalPage = () => {
    const orderStatuses = [
        "–õ–∏–¥", "–ò–∑—É—á–∞–µ–º –¢–ó", "–û–±—Å—É–∂–¥–∞–µ–º —Å –∫–ª–∏–µ–Ω—Ç–æ–º", "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç",
        "–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", "–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É", "–í–µ–¥–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞", "–¢–µ—Å—Ç–∏—Ä—É–µ–º", "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç",
        "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É", "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", "–ó–∞–∫—Ä—ã—Ç",
        "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω", "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"
    ];

    const statusToEmojiMap = {
        "–õ–∏–¥": "üéØ", "–ò–∑—É—á–∞–µ–º –¢–ó": "üìÑ", "–û–±—Å—É–∂–¥–∞–µ–º —Å –∫–ª–∏–µ–Ω—Ç–æ–º": "üí¨",
        "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç": "ü§î", "–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É": "üí≥", "–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É": "üöÄ",
        "–í–µ–¥–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": "üíª", "–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞": "üìù", "–¢–µ—Å—Ç–∏—Ä—É–µ–º": "üß™",
        "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç": "üëÄ", "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ": "üîß", "–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É": "üí∏",
        "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω": "üèÜ", "–ó–∞–∫—Ä—ã—Ç": "üèÅ", "–ù–µ—É–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω": "‚ùå", "–£–¥–∞–ª–µ–Ω–Ω—ã–µ": "üóëÔ∏è"
    };

    
    const [allLogEntries, setAllLogEntries] = useState(getLogEntries());
    const [displayedLogEntries, setDisplayedLogEntries] = useState(allLogEntries);
    const [selectedEntry, setSelectedEntry] = useState(null);
    const [showAddForm, setShowAddForm] = useState(false);
    const [searchOrderNumber, setSearchOrderNumber] = useState("");
    const [searchWorkDate, setSearchWorkDate] = useState("");
    const [searchWorkDone, setSearchWorkDone] = useState("");
    const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);

    useEffect(() => {
        applyFilters();
    }, [searchOrderNumber, searchWorkDate, searchWorkDone, allLogEntries]);

    const applyFilters = () => {
        let filtered = allLogEntries.filter(entry => {
            const matchesOrderNumber = searchOrderNumber ? entry.orderNumber.toLowerCase().includes(searchOrderNumber.toLowerCase()) : true;
            const matchesWorkDate = searchWorkDate ? entry.workDate.toLowerCase().includes(searchWorkDate.toLowerCase()) : true;
            const matchesWorkDone = searchWorkDone ? entry.workDone.toLowerCase().includes(searchWorkDone.toLowerCase()) : true;
            return matchesOrderNumber && matchesWorkDate && matchesWorkDone;
        });
        setDisplayedLogEntries(filtered);
    };

    const handleResetSearch = () => {
        setSearchOrderNumber("");
        setSearchWorkDate("");
        setSearchWorkDone("");
        setDisplayedLogEntries(allLogEntries);
    };

    const handleRowClick = (entry) => setSelectedEntry(entry);
    const handleCloseDetails = () => setSelectedEntry(null);

    
    const handleAddLogEntry = (newEntry) => {
        const updatedEntries = addLogEntry(newEntry);
        setAllLogEntries(updatedEntries);
        setShowAddForm(false);
    };

    const handleUpdateLogEntry = (updatedEntry) => {
        const updatedEntries = updateLogEntry(updatedEntry);
        setAllLogEntries(updatedEntries);
        setSelectedEntry(null); 
    };

    const handleDeleteLogEntry = (idToDelete) => {
        const updatedEntries = deleteLogEntry(idToDelete);
        setAllLogEntries(updatedEntries);
        setSelectedEntry(null); 
    };

    const handleDuplicateLogEntry = (entryToDuplicate) => {
        const duplicatedData = {
            ...entryToDuplicate,
            description: `${entryToDuplicate.description} (–ö–æ–ø–∏—è)`,
        };
        delete duplicatedData.id; 
        
        const updatedEntries = addLogEntry(duplicatedData);
        setAllLogEntries(updatedEntries);
    };

    return (
        <div className="journal-page">
            <Sidebar />
            <div className="journal-page-main-container">
                <header className="journal-header-container">
                    <h1 className="journal-title">–ñ—É—Ä–Ω–∞–ª</h1>
                    <div className="add-entry-button-wrapper">
                        <button className="add-entry-button" onClick={() => setShowAddForm(true)}>
                            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                        </button>
                    </div>
                    <div className="search-container">
                        <div className="main-search-bar">
                            <span className="search-icon">üîç</span>
                            <input
                                type="text"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –¥–∞—Ç—É –∏–ª–∏ —Å–ª–æ–≤–æ"
                                className="main-search-input"
                                value={`${searchOrderNumber} ${searchWorkDate} ${searchWorkDone}`.trim()}
                                onChange={() => {}}
                                onFocus={() => setShowAdvancedSearch(true)}
                            />
                            <span
                                className="toggle-advanced-search"
                                onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}
                            >
                                {showAdvancedSearch ? "‚ñ≤" : "‚ñº"}
                            </span>
                        </div>

                        {showAdvancedSearch && (
                            <div className="advanced-search-fields">
                                <div className="search-field-group">
                                    <label>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</label>
                                    <input
                                        type="text"
                                        placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                                        value={searchOrderNumber}
                                        onChange={(e) => setSearchOrderNumber(e.target.value)}
                                    />
                                    <span className="clear-input" onClick={() => setSearchOrderNumber("")}>‚úñÔ∏è</span>
                                </div>
                                <div className="search-field-group">
                                    <label>–î–µ–Ω—å</label>
                                    <input
                                        type="text"
                                        placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å"
                                        value={searchWorkDate}
                                        onChange={(e) => setSearchWorkDate(e.target.value)}
                                    />
                                    <span className="clear-input" onClick={() => setSearchWorkDate("")}>‚úñÔ∏è</span>
                                </div>
                                <div className="search-field-group">
                                    <label>–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ?</label>
                                    <input
                                        type="text"
                                        placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–∞"
                                        value={searchWorkDone}
                                        onChange={(e) => setSearchWorkDone(e.target.value)}
                                    />
                                    <span className="clear-input" onClick={() => setSearchWorkDone("")}>‚úñÔ∏è</span>
                                </div>
                                <div className="search-buttons">
                                    <button className="reset-button" onClick={handleResetSearch}>–°–±—Ä–æ—Å–∏—Ç—å</button>
                                    <button className="search-button" onClick={applyFilters}>–ü–æ–∏—Å–∫</button>
                                </div>
                            </div>
                        )}
                    </div>
                </header>

                <div className="journal-table-container">
                    <table className="journal-table">
                        <thead>
                            <tr>
                                <th>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</th>
                                <th>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</th>
                                <th>‚Ññ –∑–∞–∫–∞–∑–∞</th>
                                <th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–æ–ª—å</th>
                                <th>–î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã</th>
                                <th>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</th>
                                <th>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</th>
                                <th>–ß–∞—Å—ã</th>
                                <th>–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ?</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayedLogEntries.map((entry) => (
                                <tr key={entry.id} onClick={() => handleRowClick(entry)} className="journal-table-row">
                                    <td className="status-cell" title={entry.status}>
                                        {statusToEmojiMap[entry.status] || entry.status}
                                    </td>
                                    <td>{entry.description}</td>
                                    <td>{entry.orderNumber}</td>
                                    <td>{entry.executorRole}</td>
                                    <td>{entry.workDate}</td>
                                    <td>{entry.startTime}</td>
                                    <td>{entry.endTime}</td>
                                    <td>{entry.hours}</td>
                                    <td>{entry.workDone}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>

            {selectedEntry && (
                <LogEntryDetails
                    entry={selectedEntry}
                    onClose={handleCloseDetails}
                    onDelete={handleDeleteLogEntry}
                    onDuplicate={handleDuplicateLogEntry}
                    onUpdate={handleUpdateLogEntry}
                    orderStatuses={orderStatuses}
                />
            )}

            {showAddForm && (
                <AddLogEntryForm
                    onAdd={handleAddLogEntry}
                    onClose={() => setShowAddForm(false)}
                    orderStatuses={orderStatuses}
                />
            )}
        </div>
    );
};

export default JournalPage;