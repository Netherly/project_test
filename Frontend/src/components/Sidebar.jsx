import React, { useContext, useState } from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { ThemeContext } from '../context/ThemeContext';
import '../styles/Sidebar.css';

import dashboardIcon from '../assets/menu-icons/dashboard_static.png';
import dashboardIconActive from '../assets/menu-icons/dashboard.gif';
import ordersIcon from '../assets/sub-menu-icons/orders_static.png';
import ordersIconActive from '../assets/sub-menu-icons/orders.gif';
import testactive from '../assets/menu-icons/test-icon.webp'

const Sidebar = () => {
  const { theme, toggleTheme, backgroundImage, setBackgroundImage } = useContext(ThemeContext);
  const [openMenu, setOpenMenu] = useState(null);

  const toggleMenu = (menu) => {
    setOpenMenu(openMenu === menu ? null : menu);
  };

  const handleBackgroundChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setBackgroundImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const renderLink = (to, label, staticIcon, activeIcon, isSub = false) => {
    return (
      <li className={isSub ? 'submenu-item' : 'menu-item'} onClick={() => setOpenMenu(null)}>
        <NavLink
          to={to}
          className={({ isActive }) => (isActive ? (isSub ? 'active-sub' : 'active') : '')}
        >
          {({ isActive }) => (
            <>
              <img
                src={isActive ? activeIcon : staticIcon}
                alt={label}
                className={isSub ? 'submenu-icon' : 'menu-icon'}
              />
              <span>{label}</span>
            </>
          )}
        </NavLink>
      </li>
    );
  };

   const copyClientId = (clientId) => {
    navigator.clipboard.writeText(clientId).then(() => {
      console.log('ID –∫–ª–∏–µ–Ω—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', clientId);
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
    });
  };

  const clientId = "23995951"; 

  return (
    <nav
      className={`sidebar ${theme}`}
    >
      <NavLink className="avatar-link">
          <img src="/avatar.jpg" alt="–ü—Ä–æ—Ñ–∏–ª—å" className="avatar-sidebar" />
          <div className="avatar-dropdown">
            <div className="avatar-info">
              <div className="avatar-name">Nickname</div>
              <div
                className="avatar-id"
                onClick={() => copyClientId(clientId)}
                style={{ cursor: 'pointer' }}
                title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
              >
                ID: {clientId} üìã
              </div>
            </div>
            <div className="avatar-actions">
              <NavLink to="/profile" className="avatar-action">–ø—Ä–æ—Ñ–∏–ª—å</NavLink>
              <button className="avatar-action">–≤—ã–π—Ç–∏</button>
            </div>
          </div>
        </NavLink>

      <div className="scrollable-menu hidden-scroll">
        <ul className="menu">
          {renderLink('/home', '–ì–ª–∞–≤–Ω–∞—è', dashboardIcon, dashboardIconActive)}

          <li className="menu-item">
            <a
              href="#"
              className={openMenu === 'workspace' ? 'active' : ''}
              onClick={(e) => {
                e.preventDefault();
                toggleMenu('workspace');
              }}
            >
              <img
                src={openMenu === 'workspace' ? dashboardIconActive : dashboardIcon}
                alt="–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
                className="menu-icon"
              />
              <span>–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª</span>
            </a>
          </li>

          {openMenu === 'workspace' && (
            <div className="submenu-panel show">
              <ul className="submenu">
                {renderLink('/orders', '–ó–∞–∫–∞–∑—ã', ordersIcon, ordersIconActive, true)}
                {renderLink('/executors', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏', ordersIcon, ordersIconActive, true)}
                {renderLink('/tasks', '–ó–∞–¥–∞—á–∏', ordersIcon, ordersIconActive, true)}
                {renderLink('/journal', '–ñ—É—Ä–Ω–∞–ª', ordersIcon, ordersIconActive, true)}
                {renderLink('/calendar', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', ordersIcon, ordersIconActive, true)}
              </ul>
            </div>
          )}

          <li className="menu-item">
            <a
              href="#"
              className={openMenu === 'directory' ? 'active' : ''}
              onClick={(e) => {
                e.preventDefault();
                toggleMenu('directory');
              }}
            >
              <img src={"https://cdn-icons-gif.flaticon.com/7211/7211817.gif"} alt="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫" className="menu-icon" />
              <span>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫</span>
            </a>
          </li>

          {openMenu === 'directory' && (
            <div className="submenu-panel show">
              <ul className="submenu">
                {renderLink('/clients', '–ö–ª–∏–µ–Ω—Ç—ã', ordersIcon, ordersIconActive, true)}
                {renderLink('/employees', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', ordersIcon, ordersIconActive, true)}
                {renderLink('/reports', '–û—Ç—á–µ—Ç—ã', ordersIcon, ordersIconActive, true)}
                {renderLink('/access', '–î–æ—Å—Ç—É–ø—ã', ordersIcon, ordersIconActive, true)}
              </ul>
            </div>
          )}

          {renderLink('/stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', ordersIcon, ordersIconActive)}
          {renderLink('/assets', '–ê–∫—Ç–∏–≤—ã', testactive, testactive)}
          {renderLink('/transactions', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', ordersIcon, ordersIconActive)}
          {renderLink('/archive', '–ê—Ä—Ö–∏–≤', ordersIcon, ordersIconActive)}
        </ul>
      </div>
    </nav>
  );
};

export default Sidebar;