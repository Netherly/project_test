import React, { useState, useContext } from "react";
import { useForm, FormProvider } from "react-hook-form";
import Sidebar from "../components/Sidebar";
import Requisites from "../components/ui/Requisites/Requisites";
import { ThemeContext } from "../context/ThemeContext";
import "../styles/Profile.css";

function Profile() {

    const { theme, toggleTheme, setBackgroundImage } = useContext(ThemeContext);

    // –î–µ—Ñ–æ–ª—Ç –Ω–∞—Å—Ç—Ä–π–æ–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    const defaultSettings = {
        nickname: "admin-001",
        password: "11111111",
        email: "admin@gmail.com",
        userId: "",
        fullName: "",
        requisites: [{ currency: "", bank: "", account: "" }],
        currency: "UAH",
        workSchedule: Array(7).fill(["09:00", "18:00"]),
        botReminders: Array(7).fill(false),
        crmLanguage: "ua",
        crmTheme: "light",
        crmBackground: null,
        notifySound: true,
        notifyCounter: true,
        notifyTelegram: true
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const savedSettings = JSON.parse(localStorage.getItem("profileSettings")) || defaultSettings;

    // –§–æ—Ä–º–∞ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
    const methods = useForm({
        defaultValues: {
            requisites: savedSettings.requisites
        }
    });

    // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    const [settings, setSettings] = useState(savedSettings);

    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const [originalSettings, setOriginalSettings] = useState(savedSettings);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö
    const watchedRequisites = methods.watch("requisites");

    // –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–∞—Ä–æ–ª—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const [showPassword, setShowPassword] = useState(false);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–Ω–µ–Ω–∏–π
    const changed =
        JSON.stringify({ ...settings, requisites: watchedRequisites }) !==
        JSON.stringify(originalSettings);

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID –∫–ª–∏–µ–Ω—Ç–∞
    const copyClientId = (clientId) => {
        navigator.clipboard.writeText(clientId).then(() => {
            console.log('ID –∫–ª–∏–µ–Ω—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', clientId);
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleChange = (field, value) => {
        setSettings(prev => ({ ...prev, [field]: value }));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    const handleWorkScheduleChange = (dayIndex, index, value) => {
        const updated = [...settings.workSchedule];
        updated[dayIndex] = [...updated[dayIndex]];
        updated[dayIndex][index] = formatTime(value);
        handleChange("workSchedule", updated);
    };

    // –í—Ä–µ–º–µ–Ω–∞ —Å—É—Ç–æ–∫
    const formatTime = (value) => {
        const numbers = value.replace(/\D/g, '').slice(0, 4);

        let hours = numbers.slice(0, 2);
        let minutes = numbers.slice(2, 4);

        if (hours.length === 2) {
            let h = parseInt(hours, 10);
            if (h > 23) h = 23;
            hours = h.toString().padStart(2, '0');
        }

        if (minutes.length === 2) {
            let m = parseInt(minutes, 10);
            if (m > 59) m = 59;
            minutes = m.toString().padStart(2, '0');
        }

        let formattedValue = hours;
        if (minutes.length > 0) {
            formattedValue += ':' + minutes;
        }

        return formattedValue;
    };

    // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const [errors, setErrors] = useState({});

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
    const handleSave = () => {
        const requisitesFromForm = methods.getValues("requisites");
        const newErrors = {};

        if (!settings.nickname.trim()) {
            newErrors.nickname = "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º";
        }

        if (!settings.email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            newErrors.email = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email";
        }

        if (!settings.password.trim()) {
            newErrors.password = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å";
        }

        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }

        setErrors({});
        const newSettings = { ...settings, requisites: requisitesFromForm };

        setSettings(newSettings);
        setOriginalSettings(newSettings);
        localStorage.setItem("profileSettings", JSON.stringify(newSettings));
        methods.reset({ requisites: newSettings.requisites });
    };


    // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º
    const handleCancel = () => {
        setSettings(originalSettings);
        if (originalSettings.crmTheme !== theme) toggleTheme();
        setBackgroundImage(originalSettings.crmBackground);
        methods.reset({ requisites: originalSettings.requisites });
        setErrors({});
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞
    const handleBackgroundChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setBackgroundImage(reader.result);
                handleChange("crmBackground", reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    return (
        <div className="profile-main-wrapper">
            <Sidebar />
            <div className="profile-container hidden-scroll">

                {changed && (
                    <div className="save-cancel">
                        <button className="save-btn" onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button className="cancel-btn" onClick={handleCancel}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                )}

                <h3 className="title-section">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h3>
                <div className="profile-box">
                    <div className="profile-header">
                        <img src="/avatar.jpg" alt="Avatar" className="avatar-profile" />
                        <div className="profile-fields">
                            <div className="form-group">
                                <label className="title-label">–Æ–∑–µ—Ä ID</label>
                                <span
                                    className="user-id-span"
                                    onClick={() => copyClientId(settings.userId || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")}
                                    title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
                                >
                                    {settings.userId || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}
                                </span>
                            </div>
                            <div className="form-group">
                                <label className="title-label">–§–ò–û</label>
                                <span className="user-fullname-span">
                                    {settings.fullName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                                </span>
                            </div>

                            <div className="form-group">
                                <label className="title-label">Nickname</label>
                                <div className="input-error-container">
                                    <input
                                        name="nickname"
                                        type="text"
                                        value={settings.nickname}
                                        onChange={e => handleChange("nickname", e.target.value)}
                                        className={errors.nickname ? "input-error" : ""}
                                    />
                                    {errors.nickname && <div className="error-message">{errors.nickname}</div>}
                                </div>
                            </div>

                            <div className="form-group">
                                <label className="title-label">Password</label>
                                <div className="input-error-container">
                                    <div className="input-with-button">
                                        <input
                                            name="password"
                                            type={showPassword ? "text" : "password"}
                                            value={settings.password}
                                            onChange={e => handleChange("password", e.target.value)}
                                            className={errors.password ? "input-error" : ""}
                                        />
                                        <button
                                            type="button"
                                            onClick={() => setShowPassword(prev => !prev)}
                                            className="eye-button"
                                        >
                                            {showPassword ? "üôà" : "üëÅÔ∏è"}
                                        </button>
                                    </div>
                                    {errors.password && <div className="error-message">{errors.password}</div>}
                                </div>
                            </div>

                            <div className="form-group">
                                <label className="title-label">Email</label>
                                <div className="input-error-container">
                                    <input
                                        name="email"
                                        type="email"
                                        value={settings.email}
                                        onChange={e => handleChange("email", e.target.value)}
                                        className={errors.email ? "input-error" : ""}
                                    />
                                    {errors.email && <div className="error-message">{errors.email}</div>}
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <h3 className="title-section">–†–µ–∫–≤–∏–∑–∏—Ç—ã</h3>
                <div className="profile-box">
                    <div className="profile-header">
                        <div className="avatar-padding"></div>
                        <div className="profile-fields">

                            <div className="form-group">
                                <label className="title-label">–†–µ–∫–≤–∏–∑–∏—Ç—ã</label>
                                <FormProvider {...methods}>
                                    <Requisites control={methods.control} />
                                </FormProvider>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–û–ø–ª–∞—Ç–∞ –≤ —á–∞—Å</label>
                                <div className="hourly-pay-table">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>UAH</th>
                                                <th>RUB</th>
                                                <th>USDT</th>
                                                <th>USD</th>
                                                <th>EUR</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td><span>120</span></td>
                                                <td><span>120</span></td>
                                                <td><span>120</span></td>
                                                <td><span>120</span></td>
                                                <td><span>120</span></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–í–∞–ª—é—Ç–∞ —É—á–µ—Ç–∞</label>
                                <select
                                    value={settings.currency}
                                    onChange={e => handleChange("currency", e.target.value)}
                                >
                                    <option>UAH</option>
                                    <option>RUB</option>
                                    <option>USD</option>
                                </select>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</label>
                                <div className="work-schedule-table">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>–ü–Ω</th>
                                                <th>–í—Ç</th>
                                                <th>–°—Ä</th>
                                                <th>–ß—Ç</th>
                                                <th>–ü—Ç</th>
                                                <th>–°–±</th>
                                                <th>–í—Å</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                {[...Array(7)].map((_, i) => (
                                                    <td key={i}>
                                                        <div className="time-inputs">
                                                            <input
                                                                type="text"
                                                                maxLength="5"
                                                                value={settings.workSchedule[i][0]}
                                                                onChange={e =>
                                                                    handleWorkScheduleChange(i, 0, e.target.value)
                                                                }
                                                            />
                                                            <span>|</span>
                                                            <input
                                                                type="text"
                                                                maxLength="5"
                                                                value={settings.workSchedule[i][1]}
                                                                onChange={e =>
                                                                    handleWorkScheduleChange(i, 1, e.target.value)
                                                                }
                                                            />
                                                        </div>
                                                    </td>
                                                ))}
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –±–æ—Ç–∞</label>
                                <div className="bot-reminders">
                                    {["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"].map((day, i) => (
                                        <label key={i}>
                                            <span>{day}</span>
                                            <input
                                                type="checkbox"
                                                checked={settings.botReminders?.[i] || false}
                                                onChange={e => {
                                                    const updated = [...(settings.botReminders || Array(7).fill(false))];
                                                    updated[i] = e.target.checked;
                                                    handleChange("botReminders", updated);
                                                }}
                                            />
                                        </label>
                                    ))}
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <h3 className="title-section">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å CRM</h3>
                <div className="profile-box">
                    <div className="profile-header">
                        <div className="avatar-padding"></div>
                        <div className="profile-fields">
                            <div className="form-group">
                                <label className="title-label">–Ø–∑—ã–∫ CRM</label>
                                <select
                                    value={settings.crmLanguage}
                                    onChange={e => handleChange("crmLanguage", e.target.value)}
                                >
                                    <option value="ua">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                    <option value="en">English</option>
                                </select>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–¢–µ–º–∞ CRM</label>
                                <button
                                    className="theme-toggle"
                                    onClick={() => {
                                        toggleTheme();
                                        handleChange("crmTheme", settings.crmTheme === "light" ? "dark" : "light");
                                    }}
                                >
                                    {settings.crmTheme === "light" ? "üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞"}
                                </button>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–∞</label>
                                <label className="upload-bg">
                                    <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω</span>
                                    <input type="file" accept="image/*" onChange={handleBackgroundChange} />
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <h3 className="title-section">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <div className="profile-box">
                    <div className="profile-header">
                        <div className="avatar-padding"></div>
                        <div className="profile-fields">
                            <div className="form-group">
                                <label className="title-label">–ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</label>
                                <label className="switch">
                                    <input
                                        type="checkbox"
                                        checked={settings.notifySound}
                                        onChange={e => handleChange("notifySound", e.target.checked)}
                                    />
                                    <span className="slider"></span>
                                </label>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</label>
                                <label className="switch">
                                    <input
                                        type="checkbox"
                                        checked={settings.notifyCounter}
                                        onChange={e => handleChange("notifyCounter", e.target.checked)}
                                    />
                                    <span className="slider"></span>
                                </label>
                            </div>

                            <div className="form-group">
                                <label className="title-label">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º</label>
                                <label className="switch">
                                    <input
                                        type="checkbox"
                                        checked={settings.notifyTelegram}
                                        onChange={e => handleChange("notifyTelegram", e.target.checked)}
                                    />
                                    <span className="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    );
}

export default Profile;
